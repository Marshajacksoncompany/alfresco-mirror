<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="alfresco.solr">

    <resultMap id="result_Node" type="Node">
        <result property="id" column="id" jdbcType="BIGINT" javaType="java.lang.Long"/>
        <result property="deleted" column="node_deleted" jdbcType="BIT" javaType="java.lang.Boolean" />
        <result property="transaction.id" column="txn_id" jdbcType="BIGINT" javaType="java.lang.Long"/>
        <result property="store.protocol" column="protocol" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="store.identifier" column="identifier" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="uuid" column="uuid" jdbcType="VARCHAR" javaType="java.lang.String"/>
    </resultMap>
    
    <resultMap id="result_Transaction" type="SOLRTransaction">
        <result property="id" column="id" jdbcType="BIGINT" javaType="java.lang.Long"/>
        <result property="commitTimeMs" column="commit_time_ms" jdbcType="BIGINT" javaType="java.lang.Long"/>
        <result property="updates" column="updates" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        <result property="deletes" column="deletes" jdbcType="INTEGER" javaType="java.lang.Integer"/>
    </resultMap>

    <select id="select_Txns" parameterType="SOLRTransactionParameters" resultMap="result_Transaction">
        select
            txn.id              as id,
            txn.commit_time_ms  as commit_time_ms,
            (select
                 count(node.id)
             from
                 alf_node node
             where
                 txn.id = node.transaction_id and
                 node.node_deleted = 0
            ) as updates,
            (select
                 count(node.id)
             from
                 alf_node node
             where
                 txn.id = node.transaction_id and
                 node.node_deleted = 1
            ) as deletes
        from
            alf_transaction txn
        <where>
           <if test="txnFromCommitTime != null">
               <![CDATA[txn.commit_time_ms >= #{txnFromCommitTime}]]>
           </if>
           <if test="minTxnId != null">
               <![CDATA[and txn.id >= #{minTxnId}]]>
           </if>
        </where>
        order by txn.commit_time_ms ASC, txn.id ASC
    </select>

    <select id="select_Txn_Nodes" parameterType="NodeParameters" resultMap="result_Node">
        select
            node.id             as id,
            node.node_deleted   as node_deleted,
            node.transaction_id as txn_id,
            node.uuid           as uuid,
            store.protocol      as protocol,
            store.identifier    as identifier
        from
            alf_transaction txn
            join alf_node node on (txn.id = node.transaction_id)
            join alf_store store on (store.id = node.store_id)
        <where>
           <if test="transactionIds != null">
                txn.id in 
                <foreach item="item" index="index" collection="transactionIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
           </if>
           <if test="fromNodeId != null">
                <![CDATA[and node.id >= #{fromNodeId}]]>
           </if>
           <if test="toNodeId != null">
                <![CDATA[and node.id <= #{toNodeId}]]>
           </if>
           <if test="storeProtocol != null">
                and store.protocol = #{storeProtocol}
           </if>
           <if test="storeIdentifier != null">
                and store.identifier = #{storeIdentifier}
           </if>
           <if test="includeTypeIds != null">
                and node.type_qname_id in 
                <foreach item="item" index="index" collection="includeTypeIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
           </if>
           <if test="excludeTypeIds != null">
                and node.type_qname_id not in 
                <foreach item="item" index="index" collection="excludeTypeIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
           </if>
           <if test="includeAspectIds != null">
                and exists (
                    select *
                    from alf_node_aspects aspects
                    where
                    aspects.node_id = node.id
                    and aspects.qname_id in 
                    <foreach item="item" index="index" collection="includeAspectIds" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                )
           </if>
           <if test="excludeAspectIds != null">
                and not exists (
                    select *
                    from alf_node_aspects aspects
                    where
                    aspects.node_id = node.id
                    and aspects.qname_id in 
                    <foreach item="item" index="index" collection="excludeAspectIds" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                )
           </if>
        </where>
        order by node.id ASC
    </select>
    
</mapper>